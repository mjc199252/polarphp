//// Automatically Generated From SyntaxKind.cpp.gyb.
//// Do Not Edit Directly!
//===-------------- SyntaxKind.cpp - Syntax Kind definitions --------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// This source file is part of the polarphp.org open source project
//
// Copyright (c) 2017 - 2019 polarphp software foundation
// Copyright (c) 2017 - 2019 zzu_softboy <zzu_softboy@163.com>
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://polarphp.org/LICENSE.txt for license information
// See https://polarphp.org/CONTRIBUTORS.txt for the list of polarphp project authors
//
// Created by polarboy on 2019/11/06.

#include "polarphp/syntax/SyntaxKind.h"
#include "polarphp/syntax/TokenKinds.h"

namespace polar::syntax {

bool parser_shall_omit_when_no_children(SyntaxKind kind) 
{
   switch(kind) {
<?php
foreach ($SYNTAX_NODES as $node) {
   $syntaxKind = $node->getSyntaxKind();
   if ($node->shallBeOmittedWhenEmpty()) {
?>
   case SyntaxKind::<?= $syntaxKind ?>:
      return true;
<?php
   }
}
?>
   default:
      return false;
   }
}

void dump_syntax_kind(raw_ostream &outStream, const SyntaxKind kind) 
{
   switch (kind) {
   case SyntaxKind::Token:
      outStream << "Token";
      break;
   case SyntaxKind::Unknown:
      outStream << "Unknown";
      break;
<?php
foreach ($SYNTAX_NODES as $node) {
   $syntaxKind = $node->getSyntaxKind();
?>
   case SyntaxKind::<?= $syntaxKind ?>:
      outStream << "<?= $syntaxKind ?>";
      break;
<?php
}
?>
   }
}

bool is_collection_kind(SyntaxKind kind) 
{
   switch(kind) {
<?php
foreach ($SYNTAX_NODES as $node) {
   $syntaxKind = $node->getSyntaxKind();
   if ($node->isSyntaxCollection()) {
?>
   case SyntaxKind::<?= $syntaxKind ?>:
<?php
   }
}
?>
      return true;
   default:
      return false;
   }
}

bool is_decl_kind(SyntaxKind kind) 
{
   return kind >= SyntaxKind::FirstDecl && kind <= SyntaxKind::LastDecl;
}

bool is_stmt_kind(SyntaxKind kind)
{
   return kind >= SyntaxKind::FirstStmt && kind <= SyntaxKind::LastStmt;
}

bool is_expr_kind(SyntaxKind kind)
{
   return kind >= SyntaxKind::FirstExpr && kind <= SyntaxKind::LastExpr;
}

bool is_token_kind(SyntaxKind kind) 
{
   return kind == SyntaxKind::Token;
}

bool is_unknown_kind(SyntaxKind kind) 
{
   return kind == SyntaxKind::Unknown ||
          kind == SyntaxKind::UnknownDecl ||
          kind == SyntaxKind::UnknownExpr ||
          kind == SyntaxKind::UnknownStmt;
}

SyntaxKind get_unknown_kind(SyntaxKind kind)
{
   if (is_expr_kind(kind)) {
      return SyntaxKind::UnknownExpr;
   }
   if (is_stmt_kind(kind)) {
      return SyntaxKind::UnknownStmt;
   }
   if (is_decl_kind(kind)) {
      return SyntaxKind::UnknownDecl;
   }
   return SyntaxKind::Unknown;
}

} // polar::syntax

namespace polar::utils {
using polar::syntax::SyntaxKind;
raw_ostream &operator<<(raw_ostream &outStream, SyntaxKind kind)
{
   switch (kind) {
<?php
foreach ($SYNTAX_NODES as $node) {
   $syntaxKind = $node->getSyntaxKind();
?>
   case SyntaxKind::<?= $syntaxKind ?>:
      outStream << "<?= $syntaxKind ?>";
      break;
<?php
}
?>
   case SyntaxKind::Token:
      outStream << "TokenSyntax";
      break;
   case SyntaxKind::Unknown:
      outStream << "UnknownSyntax";
      break;
   }
   return outStream;
}
} // polar::utils