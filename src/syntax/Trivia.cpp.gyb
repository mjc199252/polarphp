//// Automatically Generated From Trivia.cpp.gyb.
//// Do Not Edit Directly!
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// This source file is part of the polarphp.org open source project
//
// Copyright (c) 2017 - 2019 polarphp software foundation
// Copyright (c) 2017 - 2019 zzu_softboy <zzu_softboy@163.com>
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://polarphp.org/LICENSE.txt for license information
// See https://polarphp.org/CONTRIBUTORS.txt for the list of polarphp project authors
//
// Created by polarboy on 2019/05/12.

#include "polarphp/syntax/RawSyntax.h"
#include "polarphp/syntax/Trivia.h"

namespace polar::syntax {

TriviaPiece TriviaPiece::fromText(TriviaKind kind, StringRef text)
{
   switch (kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
   {
<?php
   if ($trivia->isCollection()) {
?>
      assert(text.size() % <?= $trivia->getCharatersLen(); ?> == 0);
      return TriviaPiece(kind, text.size() / <?= $trivia->getCharatersLen(); ?>);
<?php
   } else {
?>
      return TriviaPiece(kind, OwnedString::makeRefCounted(text));
<?php
   }
?>
   }
<?php
}
?>
   }
   llvm_unreachable("unknown kind");
}

void TriviaPiece::dump(raw_ostream &outStream, unsigned indent) const
{
   for (decltype(m_count) i = 0; i < indent; ++i) {
      outStream << ' ';
   }
   outStream << "(trivia ";
   switch (m_kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
      outStream << "<?= $trivia->getLowerName() ?>";
<?php
   if ($trivia->isCollection()) {
?>
      outStream << m_count;
<?php
   } else {
?>
      outStream.write_escaped(m_text.getStr());
<?php
   }
?>
      break;
<?php 
}
?>
   }
   outStream << ')';
}

///
/// \brief is_comment_trivia_kind
/// \param kind
/// \return
///
bool is_comment_trivia_kind(TriviaKind kind)
{
   switch (kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
<?php 
   if ($trivia->isComment()) {
?>
      return true;
<?php
   } else {
?>
      return false;
<?php
   }
?>
<?php
}
?>
   }
   llvm_unreachable("unknown kind");
}

void TriviaPiece::accumulateAbsolutePosition(AbsolutePosition &pos) const
{
   switch (m_kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
<?php
   if (!$trivia->isCollection()) {
?>
      pos.addText(m_text.getStr());
<?php
   } elseif($trivia->isNewLine()) {
?>
      /// newline
      pos.addNewlines(m_count, <?= $trivia->getCharatersLen(); ?>);
<?php
   } else {
?>
      /// collection
      pos.addColumns(m_count);
<?php
   }
?>
      break;
<?php
}
?>
   }
}

bool TriviaPiece::trySquash(const TriviaPiece &next)
{
   if (m_kind != next.m_kind) {
      return false;
   }
   switch (m_kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
<?php
   if ($trivia->isCollection()) {
?>
      m_count += next.m_count;
      return true;
<?php
   } else {
?>
      return false;
<?php
   }
}
?>
   }
   llvm_unreachable("unknown kind");
}

void TriviaPiece::print(raw_ostream &outStream) const
{
   switch (m_kind) {
<?php 
foreach($TRIVIAS as $trivia) {
   $triviaName = $trivia->getName();
?>
   case TriviaKind::<?= $triviaName ?>:
<?php
   if ($trivia->isCollection()) {
      $joined = join('', $trivia->getCharacters());
?>
      for (uint i = 0; i < m_count; ++i) {
         outStream << "<?= $joined; ?>";
      }
<?php
   } else {
?>
      outStream << m_text.getStr();
<?php
   }
?>
      break;
<?php
}
?>
   }
}

#pragma mark - Trivia collection

void Trivia::appendOrSquash(const TriviaPiece &next)
{
   if (pieces.size() > 0) {
      TriviaPiece &last = pieces.back();
      if (last.trySquash(next)) {
         return;
      }
   }
   push_back(next);
}

Trivia Trivia::appending(const Trivia &other) const
{
   auto newPieces = pieces;
   std::copy(other.begin(), other.end(), std::back_inserter(newPieces));
   return { newPieces };
}

void Trivia::dump(raw_ostream &outStream, unsigned indent) const
{
   for (const auto &piece : pieces) {
      piece.dump(outStream, indent);
   }
}

void Trivia::dump() const
{
   dump(llvm::errs());
}

void Trivia::print(raw_ostream &outStream) const
{
   for (const auto &piece : pieces) {
      piece.print(outStream);
   }
}

TriviaList::const_iterator Trivia::find(const TriviaKind desiredKind) const
{
   return std::find_if(pieces.begin(), pieces.end(),
                       [=](const TriviaPiece &piece) -> bool {
      return piece.getKind() == desiredKind;
   });
}

Trivia Trivia::operator+(const Trivia &other) const
{
   auto newPieces = pieces;
   std::copy(other.pieces.begin(), other.pieces.end(),
             std::back_inserter(newPieces));
   return { newPieces };
}

} // polar::syntax
