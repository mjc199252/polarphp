<?php
use Gyb\Syntax\Token\DeclKeyword;
use Gyb\Syntax\Token\ExprKeyword;
use Gyb\Syntax\Token\StmtKeyword;
use Gyb\Syntax\Token\InternalKeyword;
use Gyb\Syntax\Token\Keyword;
use Gyb\Syntax\Token\Misc;
use Gyb\Syntax\Token\Punctuator;
?>
// This source file is part of the polarphp.org open source project
//
// Copyright (c) 2017 - 2019 polarphp software foundation
// Copyright (c) 2017 - 2019 zzu_softboy <zzu_softboy@163.com>
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://polarphp.org/LICENSE.txt for license information
// See https://polarphp.org/CONTRIBUTORS.txt for the list of polarphp project authors
//
// Created by polarboy on 2019/11/08.

#include "polarphp/syntax/TokenKinds.h"
#include "llvm/Support/raw_ostream.h"

namespace polar::syntax {

namespace {

StringRef get_token_text_internal(TokenKindType kind)
{
   switch(kind) {
<?php 
foreach ($TOKENS as $token) {
   $text = trim($token->getText());
   $kind = $token->getKind();
   if (!empty($text)) {
?>
   case TokenKindType::<?= $kind ?>: 
      return "<?= $text ?>";
<?php
   }
}
?>
   }
   return StringRef();
}

} // anonymous namespace

bool is_token_text_determined(TokenKindType kind) 
{
   return !get_token_text_internal(kind).empty();
}

StringRef get_token_text(TokenKindType kind)
{
   auto text = get_token_text_internal(kind);
   assert(!text.empty() && "token kind cannot be determined");
   return text;
}

StringRef get_token_name(TokenKindType kind)
{
   switch(kind) {
<?php
foreach ($TOKENS as $token) {
   $kind = $token->getKind();
   $name = $token->getName();
?>
   case TokenKindType::<?= $kind ?>:
      return "<?= $name ?>";
<?php
}
?>
   }
   return StringRef();
}

StringRef get_token_kind_str(TokenKindType kind)
{
   switch(kind) {
<?php
foreach ($TOKENS as $token) {
   $kind = $token->getKind();
?>
   case TokenKindType::<?= $kind ?>:
      return "<?= $kind ?>";
<?php
}
?>
   }
   return StringRef();
}

TokenCategory get_token_category(TokenKindType kind)
{
   switch(kind) {
<?php
foreach ($TOKENS as $token) {
   $kind = $token->getKind();
?>
   case TokenKindType::<?= $kind ?>:
<?php
   if ($token instanceof DeclKeyword) {
?>
      return TokenCategory::DeclKeyword;
<?php
   } elseif ($token instanceof ExprKeyword) {
?>
      return TokenCategory::ExprKeyword;
<?php
   } elseif ($token instanceof StmtKeyword) {
?>
      return TokenCategory::StmtKeyword;
<?php
   } elseif ($token instanceof InternalKeyword) {
?>
      return TokenCategory::Internal;
<?php
   } elseif ($token instanceof Keyword) {
?>
      return TokenCategory::Keyword;
<?php
   } elseif ($token instanceof Misc) {
?>
      return TokenCategory::Misc;
<?php
   } else {
?>
      return TokenCategory::Punctuator;
<?php
   }
}
?>
   }
   return TokenCategory::Unknown;
}

void dump_token_kind(raw_ostream &outStream, TokenKindType kind)
{
   StringRef kindStr = get_token_kind_str(kind);
   if (!kindStr.empty()) {
      outStream << kindStr;
      return;
   }
   llvm_unreachable("unknown token kind");
}

bool is_internal_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::Internal;
}

bool is_keyword_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::Keyword;
}

bool is_decl_keyword_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::DeclKeyword;
}

bool is_stmt_keyword_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::StmtKeyword;
}

bool is_expr_keyword_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::ExprKeyword;
}

bool is_punctuator_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::Punctuator;
}

bool is_misc_token(TokenKindType kind)
{
   return get_token_category(kind) == TokenCategory::Misc;
}

} // polar::syntax